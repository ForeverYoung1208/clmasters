{"version":3,"sources":["img/glow_clock2.png","context/contexts.jsx","ui/card.jsx","pages/adminPage.jsx","ui/button.jsx","pages/authPage.jsx","hooks/useHttp.jsx","pages/mastersPage.jsx","routes.jsx","components/header/menu/menuItem.jsx","components/header/menu.jsx","hooks/useMenu.jsx","components/header/userInfo.jsx","components/header.jsx","App.jsx","hooks/useAuth.jsx","serviceWorker.js","index.js"],"names":["module","exports","AuthContext","React","createContext","Card","props","className","header","children","AdminPage","Button","type","onClick","AuthPage","useState","email","password","formData","setFormData","isLoading","setIsLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","res","json","data","ok","Error","message","clearError","useHttp","auth","useContext","history","useHistory","changeHandler","e","target","name","value","submitHandler","user","login","push","console","log","htmlFor","id","onChange","disabled","OrderPage","useRoutes","currentUser","path","exact","isAdmin","to","MenuItem","isShown","activeClassName","Menu","buildMenuItems","cu","items","menuItems","setMenuItems","updateMenuItems","useMenu","useEffect","CSSTransition","in","timeout","classNames","map","mi","key","UserInfo","unmountOnExit","logout","Header","src","logoImg","alt","App","setCurrentUser","parse","localStorage","getItem","token","setItem","removeItem","useAuth","routes","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.75307968.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/glow_clock2.e3dc12cf.png\";","import React from 'react';\n\nexport const AuthContext = React.createContext();","import React from 'react'\nimport PT from 'prop-types';\n\nimport './card.scss'\n\nexport const Card = (props)=> (\n  <div className=\"card\">\n    <h2>{props.header}</h2>\n    {props.children}\n  </div>\n)\n\nCard.propTypes = {\n  header: PT.string,\n  children: PT.oneOfType([\n    PT.arrayOf(PT.node),\n    PT.node\n  ]).isRequired\n};\n\nexport default Card;\n","import React from 'react';\nimport { Card } from '../ui/card';\n\nimport './adminPage.scss';\n\nconst AdminPage = () => {\n    return (\n        <div className=\"adminPage\">\n          <Card\n            header = \"Order Page here\"\n          >  \n            Order Page text here\n          </Card>\n        </div>\n    );\n};\n\nAdminPage.propTypes = {\n    \n};\n\nexport default AdminPage;\n","import React from 'react';\nimport PT from 'prop-types';\n\nimport './button.scss';\n\nconst Button = (props) => {\n    return (\n      <button type=\"button\" onClick={props.onClick} className = \"btn-sm\">\n        {props.children}\n      </button>\n    );\n};\n\nButton.propTypes = {\n  onClick: PT.func.isRequired,\n  children: PT.oneOfType([\n    PT.arrayOf(PT.node),\n    PT.node\n  ]).isRequired\n};\n\nexport default Button;\n\n","import React, { useState, useContext } from 'react'\nimport { useHistory } from 'react-router-dom';\n\nimport { Card } from '../ui/card';\nimport { useHttp } from '../hooks/useHttp'\nimport { AuthContext } from '../context/contexts';\nimport Button from '../ui/button';\n\nimport './authPage.scss'\n\nconst AuthPage = () =>{\n  const [formData, setFormData] = useState({\n    email:'',\n    password:'',\n  })\n  const { isLoading, request } = useHttp()\n  const { auth } =useContext(AuthContext)\n  const history = useHistory()\n\n  const changeHandler = (e) =>{\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const submitHandler = async () =>{\n    try {\n      const { user } = await request('/api/auth/login', 'POST', JSON.stringify({...formData}) )\n      auth.login(user)\n      history.push('/user')\n\n    } catch (err) {\n      console.log('[err]', err);\n    }\n  }\n    \n  return(\n      <div className='authPage'>\n        <Card\n          header =\"Authentication\"\n        >\n          <form>\n            <label htmlFor=\"email\">Email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" onChange={changeHandler}  disabled={isLoading}/>\n\n            <label htmlFor=\"password\">Password</label>\n            <input type=\"password\" name=\"password\" id=\"password\"  onChange={changeHandler}  disabled={isLoading}/>\n\n            <Button type=\"button\" onClick={submitHandler} disabled={isLoading}>Login</Button>\n            {/* <button type=\"button\" onClick={auth.logout} disabled={isLoading}> Logout </button> */}\n          </form>\n        </Card>\n\n      </div>\n  )\n}\n\nexport default AuthPage;","import { useState, useCallback } from 'react'\n// import { useState } from 'react'\n\nexport const useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n\n  const request = useCallback ( async (url, method='GET', body=null, headers={} ) =>{\n    try {\n      setIsLoading(true)\n\n      body && JSON.stringify(body)\n      headers = {\n        ...headers,\n        'Content-Type': 'application/json',\n      }\n\n\n      const res = await fetch( 'http://localhost:5000'+url, { method, body, headers})\n      const data = await res.json();\n      setIsLoading(false)\n\n      if(!res.ok){\n        throw new Error(`Smthng wrong with http request ${method}, ${url}, ${JSON.stringify(headers)}, ${JSON.stringify(body)}; got message: ${data?.message}`)\n      }\n\n      return data\n    } catch (e) {\n      setIsLoading(false)\n      setError(e.message)\n      throw e\n    }\n  } , [])\n\n  const clearError = () => {\n    setError(null)      \n  };\n\n  return({isLoading, request, error, clearError})  \n\n};\n\n","import React from 'react';\nimport { Card } from '../ui/card';\n\nimport './mastersPage.scss';\n\nconst OrderPage = () => {\n    return (\n        <div className=\"mastersPage\">\n          <Card\n            header = \"Masters Page here\"\n          >  \n            Masters Page text here\n          </Card>\n        </div>\n    );\n};\n\nOrderPage.propTypes = {\n    \n};\n\nexport default OrderPage;\n","import React from 'react';\nimport {Switch, Route, Redirect} from 'react-router-dom';\nimport AdminPage from './pages/adminPage';\nimport AuthPage from './pages/authPage';\nimport MastersPage from './pages/mastersPage';\n\n// { name:'Info', path:'/info'},\n// { name:'Find master', path:'/masters'},\n// { name:'Login', path:'/login'},\n// { name:'Administration', path:'/admin'}\n\n\nexport const useRoutes = (currentUser) => {\n  return (\n    <Switch>\n      <Route path=\"/info\" exact>\n        <div>info page here</div>\n        {/* <InfoPage/> */}\n      </Route>\n      <Route path=\"/masters\" exact>\n        <MastersPage/>\n      </Route>\n      <Route path=\"/login\" exact>\n        <AuthPage/>\n      </Route>\n      <Route path=\"/user\" exact>\n        UserPage\n      </Route>\n      {currentUser?.isAdmin && <Route path=\"/admin\" exact>\n        <AdminPage/>\n      </Route>}\n      <Redirect to = \"/info\"/>\n    </Switch>\n  ) \n}\n\nexport default useRoutes;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './menuItem.scss';\nimport PT from 'prop-types';\n\nexport const MenuItem = (props) => {\n\n  return (\n    props.isShown &&\n      <NavLink\n        to={props.path}\n        // exact=true\n        className=\"menu__menuItem\"\n        activeClassName=\"menu__menuItem__active\"\n      >\n        {props.children}\n      </NavLink> \n  )\n};\n\nMenuItem.propTypes={\n  children: PT.node.isRequired,\n  isShown: PT.bool.isRequired,\n  path: PT.string.isRequired\n}\n\n","import React, { useContext, useEffect } from 'react';\n\nimport { useMenu } from '../../hooks/useMenu';\nimport { MenuItem } from \"./menu/menuItem\";\nimport { AuthContext } from '../../context/contexts';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './menu.scss';\n\nconst Menu = () => {\n  const { auth } =useContext(AuthContext)\n  const { menuItems, updateMenuItems } = useMenu(auth.currentUser);\n  useEffect(()=>{\n      updateMenuItems(auth.currentUser)\n    }, [auth.currentUser]\n  )\n  \n  return (\n    <CSSTransition\n    in={!!auth.currentUser}\n    timeout={300}\n    classNames=\"appear\"\n    >\n      <div className=\"menu\">\n        {menuItems.items.map( mi => \n            <MenuItem\n              key={mi.name}\n              isShown = {mi.isShown}\n              path={mi.path}\n              >\n              {mi.name}\n            </MenuItem> \n        )}\n      \n      </div>\n    </CSSTransition>      \n  );\n};\n\nexport default Menu;\n","import { useState } from 'react';\nexport const useMenu = (currentUser) => {\n\n  const buildMenuItems = (cu) => {\n    return([\n      { name:'Info', path:'/info', isShown:true},\n      { name:'Find master', path:'/masters', isShown:true},\n      { name:'Login', path:'/login', isShown:!(cu?.email)},\n      { name:'User page', path:'/user', isShown:true},\n      { name:'Administration', path:'/admin', isShown:!!(cu && cu.isAdmin)}\n    ])\n  };\n  \n  const [menuItems,setMenuItems] = useState({\n    items:buildMenuItems(currentUser),\n  })\n\n  const updateMenuItems = (currentUser)=>{\n    setMenuItems({\n      items:buildMenuItems(currentUser),\n    })\n  }\n\n  return( {menuItems, updateMenuItems} )\n};","import React, { useContext } from 'react';\nimport { AuthContext } from '../../context/contexts';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './userInfo.scss';\n\nconst UserInfo = () => {\n  const { auth } = useContext(AuthContext)\n  return (\n    <CSSTransition\n    in={!!auth.currentUser}\n    timeout={300}\n    classNames=\"appear\"\n    unmountOnExit            \n    >\n\n      <>\n        {auth.currentUser && <div className=\"userinfo-email\">{auth.currentUser.email}</div>}\n        {<button onClick={auth.logout}> Log out</button>}\n      </>\n    </CSSTransition>\n\n  );\n};\n\nexport default UserInfo;\n","import React from 'react';\n\nimport logoImg from '../img/glow_clock2.png';\nimport Menu from './header/menu';\nimport UserInfo from './header/userInfo';\n\nimport './header.scss';\n\nconst Header = () => {\n\n  return (\n      <div className=\"header\">\n        <div className=\"header__logo\">\n          <img src={logoImg} alt=\"logo\"/>\n          <div className=\"caption\"> Clock Masters</div>\n        </div>\n        <div className=\"header__menu\">\n          <Menu/>\n        </div>\n        <div className=\"header__user-info\">\n            <UserInfo key='userInfo'/>\n        </div>\n      </div>\n  );\n};\n\n\nexport default Header;","import React from 'react';\nimport './App.scss';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthContext } from './context/contexts';\n\nimport { useRoutes } from './routes';\nimport { useAuth } from './hooks/useAuth';\nimport Header from './components/header';\n\nfunction App() {\n\n  const {currentUser, login, logout} = useAuth();\n  const routes = useRoutes(currentUser);\n  \n  return (\n    <AuthContext.Provider value={  {auth:{currentUser, login, logout}}  }>\n      <div className = 'app'> \n          <BrowserRouter>\n            <div className='app__header'> \n              <Header/>\n            </div>\n            <div className=\"app__content\">\n                {routes}\n            </div>\n            <footer className=\"app__footer\"> \n              By Ihor S., 2020 \n            </footer>\n          </BrowserRouter>\n      </div>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from 'react';\nexport const useAuth = () => {\n  \n  const [currentUser, setCurrentUser] = useState()\n\n  const login = (user) => {\n    localStorage.setItem('userData', JSON.stringify(user));\n    setCurrentUser(user)\n  };\n\n  const logout = () =>{\n    setCurrentUser(null)\n    localStorage.removeItem('userData')\n  }\n\n  useEffect(()=>{\n    const user = JSON.parse( localStorage.getItem('userData') )\n    if (user&&user.token){\n      setCurrentUser(user)\n    }\n  }, [setCurrentUser]) \n\n  return( {currentUser, login, logout} )\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}